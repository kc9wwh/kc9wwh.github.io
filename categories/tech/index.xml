<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tech on KC9WWH</title><link>https://kc9wwh.net/categories/tech/</link><description>Recent content in Tech on KC9WWH</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 30 Oct 2025 23:52:59 +0000</lastBuildDate><atom:link href="https://kc9wwh.net/categories/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>Running Commands as the Active User on Linux with Fleet</title><link>https://kc9wwh.net/p/running-commands-as-the-active-user-on-linux-with-fleet/</link><pubDate>Thu, 30 Oct 2025 23:52:59 +0000</pubDate><guid>https://kc9wwh.net/p/running-commands-as-the-active-user-on-linux-with-fleet/</guid><description>&lt;img src="https://kc9wwh.net/p/running-commands-as-the-active-user-on-linux-with-fleet/cover.jpg" alt="Featured image of post Running Commands as the Active User on Linux with Fleet" /&gt;&lt;h1 id="running-commands-as-the-active-user-on-linux-with-fleet"&gt;Running Commands as the Active User on Linux with Fleet
&lt;/h1&gt;&lt;p&gt;If you&amp;rsquo;ve ever tried to display a notification or launch a browser from Fleet on a Linux system, you&amp;rsquo;ve probably run into a frustrating wall: &lt;strong&gt;Fleet runs as root, but graphical applications need to run in the user&amp;rsquo;s session.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;notify-send&lt;/code&gt; as root does nothing. The notification never appears because it&amp;rsquo;s not connected to the user&amp;rsquo;s display server. Same story with launching Firefox or installing user-specific applications. They need the right environment variables, the right user context, and the right permissions.&lt;/p&gt;
&lt;p&gt;After seeing customers wrestle with this problem, I built &lt;code&gt;fleet_run_as_user.sh&lt;/code&gt;, a modular library that handles the complexity of executing commands in the active user&amp;rsquo;s graphical session.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;üìÅ &lt;a class="link" href="https://github.com/kc9wwh/playground/blob/main/scripts/linux/fleet_run_as_user.sh" target="_blank" rel="noopener"
&gt;Get the library on GitHub ‚Üí&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="the-problem-root-vs-user-context"&gt;The Problem: Root vs. User Context
&lt;/h2&gt;&lt;p&gt;Fleet executes scripts with root privileges. That&amp;rsquo;s great for system-level tasks like installing packages or modifying system files. But it creates a challenge when you need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Display notifications&lt;/strong&gt; to the logged-in user&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Launch applications&lt;/strong&gt; in the user&amp;rsquo;s GUI environment&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Install software&lt;/strong&gt; in user space (like browser extensions)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Run scripts&lt;/strong&gt; that require access to user files or settings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The issue boils down to &lt;strong&gt;environment variables and permissions&lt;/strong&gt;. A graphical application needs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DISPLAY&lt;/code&gt; or &lt;code&gt;WAYLAND_DISPLAY&lt;/code&gt; (to know which screen to use)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XAUTHORITY&lt;/code&gt; (for X11 authentication)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DBUS_SESSION_BUS_ADDRESS&lt;/code&gt; (for D-Bus communication)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XDG_RUNTIME_DIR&lt;/code&gt; (for Wayland runtime files)&lt;/li&gt;
&lt;li&gt;The correct &lt;strong&gt;user ID&lt;/strong&gt; and &lt;strong&gt;session context&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you run a command as root, none of these are set correctly. The library solves this by discovering the active session and reconstructing the user&amp;rsquo;s environment.&lt;/p&gt;
&lt;h2 id="how-it-works-three-step-process"&gt;How It Works: Three-Step Process
&lt;/h2&gt;&lt;p&gt;The library follows a simple pattern:&lt;/p&gt;
&lt;h3 id="1-find-the-active-session"&gt;1. Find the Active Session
&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;find_active_session()&lt;/code&gt; function uses &lt;code&gt;loginctl&lt;/code&gt; to identify the active graphical user session. It tries multiple strategies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, look for a session with &lt;code&gt;seat0&lt;/code&gt; (physical display)&lt;/li&gt;
&lt;li&gt;If that fails, find any graphical session&lt;/li&gt;
&lt;li&gt;Fall back to any user session (excluding system sessions)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once found, it extracts three critical pieces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SESSION_ID&lt;/code&gt; (the session identifier)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SESSION_USER&lt;/code&gt; (the username)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SESSION_UID&lt;/code&gt; (the user&amp;rsquo;s numeric ID)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-extract-display-environment"&gt;2. Extract Display Environment
&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;get_display_environment()&lt;/code&gt; function reconstructs the user&amp;rsquo;s graphical environment by reading process environment files from &lt;code&gt;/proc&lt;/code&gt;. It:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Starts with the session leader process&lt;/li&gt;
&lt;li&gt;Searches other user processes if needed&lt;/li&gt;
&lt;li&gt;Extracts display server variables (&lt;code&gt;DISPLAY&lt;/code&gt;, &lt;code&gt;WAYLAND_DISPLAY&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Captures authentication tokens (&lt;code&gt;XAUTHORITY&lt;/code&gt;, &lt;code&gt;DBUS_SESSION_BUS_ADDRESS&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Sets runtime directory paths (&lt;code&gt;XDG_RUNTIME_DIR&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Falls back to sensible defaults if variables aren&amp;rsquo;t found&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This approach works for both &lt;strong&gt;X11&lt;/strong&gt; and &lt;strong&gt;Wayland&lt;/strong&gt; display servers.&lt;/p&gt;
&lt;h3 id="3-execute-in-user-context"&gt;3. Execute in User Context
&lt;/h3&gt;&lt;p&gt;With session info and environment variables in hand, the library provides two execution functions:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;run_as_session_user&lt;/code&gt;&lt;/strong&gt; runs commands as the user WITHOUT graphical environment&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use for: File operations, background tasks, non-GUI commands&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;run_as_graphical_user&lt;/code&gt;&lt;/strong&gt; runs commands WITH full graphical environment&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use for: Notifications, browser launches, GUI applications&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="implementation-two-ways-to-use-it"&gt;Implementation: Two Ways to Use It
&lt;/h2&gt;&lt;h3 id="option-1-as-a-library-recommended"&gt;Option 1: As a Library (Recommended)
&lt;/h3&gt;&lt;p&gt;Source the script and call functions directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; /path/to/fleet_run_as_user.sh
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Initialize&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;ensure_root &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;find_active_session &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;get_display_environment &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Show a notification&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;show_notification &lt;span class="s2"&gt;&amp;#34;Security Update&amp;#34;&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Please restart your device&amp;#34;&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;critical&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Launch a browser to your internal portal&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;launch_browser &lt;span class="s2"&gt;&amp;#34;https://portal.yourcompany.com&amp;#34;&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;firefox&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="option-2-modify-the-main-function"&gt;Option 2: Modify the Main Function
&lt;/h3&gt;&lt;p&gt;The script includes a &lt;code&gt;main()&lt;/code&gt; function with examples. Uncomment and customize:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;span class="lnt"&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;main&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; ensure_root &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; find_active_session &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; get_display_environment &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# Your custom action here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; run_as_graphical_user &lt;span class="s2"&gt;&amp;#34;notify-send &amp;#39;Fleet&amp;#39; &amp;#39;Compliance check complete&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Then execute the script directly from Fleet.&lt;/p&gt;
&lt;h2 id="real-world-use-cases"&gt;Real-World Use Cases
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Compliance Notifications&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Notify users when their device falls out of compliance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;show_notification &lt;span class="s2"&gt;&amp;#34;Action Required&amp;#34;&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Your system is missing security updates. Please update within 24 hours.&amp;#34;&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;critical&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Self-Service Portal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Launch a browser to your internal support portal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;launch_browser &lt;span class="s2"&gt;&amp;#34;https://support.company.com/ticket/12345&amp;#34;&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;google-chrome&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;User-Space Application Installation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Install browser extensions or user-specific tools:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;run_as_session_user &lt;span class="s2"&gt;&amp;#34;pip install --user your-package&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Pre-Restart Warnings&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Give users a heads-up before forced reboots:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;show_notification &lt;span class="s2"&gt;&amp;#34;System Maintenance&amp;#34;&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Your device will restart in 5 minutes. Please save your work.&amp;#34;&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;critical&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;sleep &lt;span class="m"&gt;300&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;reboot
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id="why-it-works-the-technical-details"&gt;Why It Works: The Technical Details
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;loginctl vs. who&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The library uses &lt;code&gt;loginctl&lt;/code&gt; instead of parsing &lt;code&gt;who&lt;/code&gt; or &lt;code&gt;w&lt;/code&gt; because it provides structured session data including session type (graphical vs. non-graphical) and seat information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Process Environment Discovery&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Reading &lt;code&gt;/proc/&amp;lt;pid&amp;gt;/environ&lt;/code&gt; gives us the actual environment variables from running processes. The library searches multiple processes because not all user processes inherit all variables.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fallback Defaults&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If environment variables aren&amp;rsquo;t found, the library uses reasonable defaults (&lt;code&gt;:0&lt;/code&gt; for DISPLAY, &lt;code&gt;wayland-0&lt;/code&gt; for Wayland). This handles edge cases where variables aren&amp;rsquo;t set consistently.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;X11 and Wayland Support&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;By checking for both &lt;code&gt;DISPLAY&lt;/code&gt; and &lt;code&gt;WAYLAND_DISPLAY&lt;/code&gt;, the library works regardless of which display server the distribution uses.&lt;/p&gt;
&lt;h2 id="troubleshooting"&gt;Troubleshooting
&lt;/h2&gt;&lt;p&gt;Enable debug mode to see what&amp;rsquo;s happening:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; ./fleet_run_as_user.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Common issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;ldquo;Could not find an active user session&amp;rdquo;&lt;/strong&gt; - No user is logged in graphically&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ldquo;Display environment not set&amp;rdquo;&lt;/strong&gt; - Call &lt;code&gt;get_display_environment&lt;/code&gt; before &lt;code&gt;run_as_graphical_user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ldquo;This script must be run as root&amp;rdquo;&lt;/strong&gt; - The script needs root privileges to switch users&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="best-practices"&gt;Best Practices
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Always check return codes&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;if&lt;/span&gt; ! find_active_session&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; error_log &lt;span class="s2"&gt;&amp;#34;No active session found&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Use the right function&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;run_as_session_user&lt;/code&gt; for file operations and background tasks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run_as_graphical_user&lt;/code&gt; for anything that needs a display&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Test with DEBUG=1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before deploying to production, test with debug logging enabled to verify the correct session and environment are detected.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Handle no-user scenarios&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Not all Linux systems have an active graphical user. Add fallback logic for headless servers or systems where no one is logged in.&lt;/p&gt;
&lt;h2 id="getting-started"&gt;Getting Started
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a class="link" href="https://github.com/kc9wwh/playground/blob/main/scripts/linux/fleet_run_as_user.sh" target="_blank" rel="noopener"
&gt;Download the library&lt;/a&gt;&lt;/strong&gt; to your Fleet scripts repository&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test locally&lt;/strong&gt; with &lt;code&gt;DEBUG=1&lt;/code&gt; enabled&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create a Fleet script&lt;/strong&gt; that sources the library&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deploy to a test group&lt;/strong&gt; before rolling out broadly&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The library is modular, well-documented, and handles the edge cases that make this problem tricky. Whether you&amp;rsquo;re pushing compliance notifications, launching self-service portals, or installing user-specific software, it gives you the building blocks to execute commands in the user&amp;rsquo;s context reliably.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Questions?&lt;/strong&gt; Drop them in the comments or reach out to the Fleet community on Slack. If you&amp;rsquo;ve built something cool with this library, I&amp;rsquo;d love to hear about it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Contributing?&lt;/strong&gt; The library is designed to be extended. Have ideas for additional convenience functions? Submit a PR or share your use case.&lt;/p&gt;
&lt;p&gt;Catch ya on the next project!&lt;/p&gt;
&lt;p&gt;Josh üññ&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a class="link" href="https://unsplash.com/@6heinz3r?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText" target="_blank" rel="noopener"
&gt;Gabriel Heinzer&lt;/a&gt; on &lt;a class="link" href="https://unsplash.com" target="_blank" rel="noopener"
&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description></item><item><title>Getting started with Fleet</title><link>https://kc9wwh.net/p/getting-started-with-fleet/</link><pubDate>Mon, 09 Jun 2025 12:33:38 +0000</pubDate><guid>https://kc9wwh.net/p/getting-started-with-fleet/</guid><description>&lt;img src="https://kc9wwh.net/p/getting-started-with-fleet/cover.jpg" alt="Featured image of post Getting started with Fleet" /&gt;&lt;h1 id="introduction-unleash-the-power-of-fleet-with-docker"&gt;Introduction: Unleash the Power of Fleet with Docker!
&lt;/h1&gt;&lt;p&gt;In today&amp;rsquo;s complex digital landscape, achieving comprehensive endpoint visibility is paramount for robust security and efficient IT operations. Fleet, an open-source platform, leverages the power of osquery to provide deep insights into device fleets, covering Linux, macOS, Windows, and even Chromebooks. It&amp;rsquo;s a versatile tool for vulnerability reporting, detection engineering, device management (MDM), and monitoring device health. However, setting up any powerful platform can sometimes seem daunting, particularly when considering resource allocation for testing or initial exploration.&lt;/p&gt;
&lt;p&gt;This is where the magic of Docker comes into play. This guide demonstrates how to launch a fully functional Fleet environment‚Äîcomplete with its necessary database and caching layer‚Äîusing individual &lt;code&gt;docker run&lt;/code&gt; commands. This approach offers a lightweight, fast, and isolated method to get hands-on with Fleet, making it ideal for IT and security professionals, DevOps engineers, or anyone curious to explore osquery management at scale with minimal upfront commitment.&lt;/p&gt;
&lt;h2 id="why-docker-for-fleet-the-easy-button-approach"&gt;Why Docker for Fleet? The &amp;ldquo;Easy Button&amp;rdquo; Approach
&lt;/h2&gt;&lt;p&gt;Utilizing Docker for deploying Fleet presents several compelling advantages, especially for evaluation, development, or smaller-scale use cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Simplicity&lt;/strong&gt;: Docker encapsulates each component of the Fleet stack (Fleet server, MySQL database, Redis cache) into its own container. This packaging simplifies deployment and dependency management.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt;: With a few Docker commands, the entire stack can be provisioned and running in minutes. Similarly, tearing down the environment is just as quick, leaving the host system clean.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Isolation&lt;/strong&gt;: Containers run in isolated environments, preventing conflicts with other software or configurations on the host machine. This is perfect for testing without impacting existing setups.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Resource Efficiency&lt;/strong&gt;: Docker containers are generally more lightweight than full virtual machines. This makes it feasible to run Fleet on a local machine or a small server for testing purposes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: Docker ensures that the Fleet environment is consistent across different machines, from a developer&amp;rsquo;s laptop to a test server.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="prerequisites-whats-needed"&gt;Prerequisites: What&amp;rsquo;s Needed
&lt;/h2&gt;&lt;p&gt;To embark on this Dockerized Fleet journey, only a few items are necessary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker Engine installed on the host system.&lt;/li&gt;
&lt;li&gt;Basic familiarity with command-line interface (CLI) operations.&lt;/li&gt;
&lt;li&gt;A spirit of exploration to dive into the capabilities of Fleet!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-architecture-the-dockerized-fleet-stack"&gt;The Architecture: The Dockerized Fleet Stack
&lt;/h2&gt;&lt;p&gt;The setup will consist of the following components, all running in separate Docker containers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;fleetdm/fleet:latest&lt;/code&gt;: The core Fleet server application.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysql:8.0.36&lt;/code&gt;: A MySQL database instance to store Fleet&amp;rsquo;s metadata.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redis&lt;/code&gt;: A Redis instance used by Fleet for caching and managing live query sessions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These containers will communicate over the host network, so it&amp;rsquo;s important to ensure the IP address used for configuration is accessible from the containers.&lt;/p&gt;
&lt;h2 id="lets-get-building-step-by-step-with-docker-run"&gt;Let&amp;rsquo;s Get Building! Step-by-Step with Docker Run
&lt;/h2&gt;&lt;p&gt;This section walks through the commands needed to bring the Fleet stack to life.&lt;/p&gt;
&lt;h3 id="step-1-prepare-host-directories"&gt;Step 1: Prepare Host Directories
&lt;/h3&gt;&lt;p&gt;Before launching the containers, you need to create the directories on your host machine that will be used for persistent storage. This ensures your data isn&amp;rsquo;t lost when containers are stopped or removed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Create directories for MySQL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;mkdir -p /mnt/user/appdata/mysql/&lt;span class="o"&gt;{&lt;/span&gt;data,logs,conf.d,initdb&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Create directory for Fleet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;mkdir -p /mnt/user/appdata/fleetdm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="step-2-launch-the-mysql-container"&gt;Step 2: Launch the MySQL Container
&lt;/h3&gt;&lt;p&gt;Run the following command to start the MySQL database. This command maps ports and volumes for data persistence and logging.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;span class="lnt"&gt;19
&lt;/span&gt;&lt;span class="lnt"&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;docker run &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -d &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --name&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MySQL&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --net&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bridge&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --pids-limit &lt;span class="m"&gt;2048&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --privileged&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="nv"&gt;TZ&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;America/Chicago&amp;#34;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;MYSQL_DATABASE&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fleet&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;MYSQL_USER&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fleet-user&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;MYSQL_PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fleet-user-password&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;MYSQL_ROOT_PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;super-secret-password&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -p &lt;span class="s1"&gt;&amp;#39;3306:3306/tcp&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -v &lt;span class="s1"&gt;&amp;#39;/mnt/user/appdata/mysql/data&amp;#39;&lt;/span&gt;:&lt;span class="s1"&gt;&amp;#39;/var/lib/mysql&amp;#39;&lt;/span&gt;:&lt;span class="s1"&gt;&amp;#39;rw&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -v &lt;span class="s1"&gt;&amp;#39;/mnt/user/appdata/mysql/logs&amp;#39;&lt;/span&gt;:&lt;span class="s1"&gt;&amp;#39;/var/log/mysql&amp;#39;&lt;/span&gt;:&lt;span class="s1"&gt;&amp;#39;rw&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -v &lt;span class="s1"&gt;&amp;#39;/mnt/user/appdata/mysql/conf.d&amp;#39;&lt;/span&gt;:&lt;span class="s1"&gt;&amp;#39;/etc/mysql/conf.d&amp;#39;&lt;/span&gt;:&lt;span class="s1"&gt;&amp;#39;rw&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -v &lt;span class="s1"&gt;&amp;#39;/mnt/user/appdata/mysql/initdb&amp;#39;&lt;/span&gt;:&lt;span class="s1"&gt;&amp;#39;/docker-entrypoint-initdb.d&amp;#39;&lt;/span&gt;:&lt;span class="s1"&gt;&amp;#39;rw&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --memory&lt;span class="o"&gt;=&lt;/span&gt;2G &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --restart&lt;span class="o"&gt;=&lt;/span&gt;unless-stopped &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mysql:8.0.36&amp;#39;&lt;/span&gt; mysqld &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --log-error&lt;span class="o"&gt;=&lt;/span&gt;/var/log/mysql/error.log
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="step-3-launch-the-redis-container"&gt;Step 3: Launch the Redis Container
&lt;/h3&gt;&lt;p&gt;Next, start the Redis container. It&amp;rsquo;s a simpler setup, primarily needing a port mapping.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;span class="lnt"&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;docker run &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -d &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --name&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Redis&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --net&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bridge&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --pids-limit &lt;span class="m"&gt;2048&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="nv"&gt;TZ&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;America/Chicago&amp;#34;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -p &lt;span class="s1"&gt;&amp;#39;6379:6379/tcp&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redis&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="step-4-launch-the-fleet-server"&gt;Step 4: Launch the Fleet Server
&lt;/h3&gt;&lt;p&gt;Finally, launch the Fleet server. This command is the most extensive, as it includes configuration details to connect to the MySQL and Redis containers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Make sure to replace &lt;code&gt;192.168.50.129&lt;/code&gt; in the &lt;code&gt;FLEET_MYSQL_ADDRESS&lt;/code&gt; and &lt;code&gt;FLEET_REDIS_ADDRESS&lt;/code&gt; variables with the actual IP address of your Docker host.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;span class="lnt"&gt;19
&lt;/span&gt;&lt;span class="lnt"&gt;20
&lt;/span&gt;&lt;span class="lnt"&gt;21
&lt;/span&gt;&lt;span class="lnt"&gt;22
&lt;/span&gt;&lt;span class="lnt"&gt;23
&lt;/span&gt;&lt;span class="lnt"&gt;24
&lt;/span&gt;&lt;span class="lnt"&gt;25
&lt;/span&gt;&lt;span class="lnt"&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;docker run &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -d &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --name&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fleetdm&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --net&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bridge&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --pids-limit &lt;span class="m"&gt;2048&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="nv"&gt;TZ&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;America/Chicago&amp;#34;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;FLEET_MYSQL_ADDRESS&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;192.168.50.129:3306&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;FLEET_MYSQL_DATABASE&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fleet&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;FLEET_MYSQL_USERNAME&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fleet-user&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;FLEET_MYSQL_PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fleet-user-password&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;FLEET_REDIS_ADDRESS&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;192.168.50.129:6379&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;FLEET_OSQUERY_STATUS_LOG_PLUGIN&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;filesystem&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;FLEET_OSQUERY_RESULT_LOG_PLUGIN&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;filesystem&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;FLEET_FILESYSTEM_STATUS_LOG_FILE&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/mnt/data/logs/status.log&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;FLEET_FILESYSTEM_RESULT_LOG_FILE&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/mnt/data/logs/result.log&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;FLEET_FILESYSTEM_AUDIT_LOG_FILE&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/mnt/data/logs/audit.log&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;FLEET_FILESYSTEM_ENABLE_LOG_ROTATION&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;true&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;FLEET_ACTIVITY_ENABLE_AUDIT_LOG&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;true&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;FLEET_ACTIVITY_AUDIT_LOG_PLUGIN&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;filesystem&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;FLEET_LOGGING_DEBUG&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;true&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;FLEET_SERVER_TLS&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;false&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -p &lt;span class="s1"&gt;&amp;#39;8083:8080/tcp&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -p &lt;span class="s1"&gt;&amp;#39;8443:443/tcp&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -v &lt;span class="s1"&gt;&amp;#39;/mnt/user/appdata/fleetdm&amp;#39;&lt;/span&gt;:&lt;span class="s1"&gt;&amp;#39;/mnt/data&amp;#39;&lt;/span&gt;:&lt;span class="s1"&gt;&amp;#39;rw&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fleetdm/fleet:latest&amp;#39;&lt;/span&gt; sh &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -c &lt;span class="s2"&gt;&amp;#34;fleet prepare db &amp;amp;&amp;amp; fleet serve&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;To monitor the logs, especially for the Fleet server, you can run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;docker logs -f fleetdm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Look for messages indicating successful database migrations and that the server has started.&lt;/p&gt;
&lt;h3 id="step-5-accessing-the-fleet-ui"&gt;Step 5: Accessing the Fleet UI
&lt;/h3&gt;&lt;p&gt;Once the containers are running, the Fleet UI should be accessible. Open a web browser and navigate to:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://&amp;lt;YOUR_DOCKER_HOST_IP&amp;gt;:8083&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first time you access Fleet, a setup screen will appear to create an administrator account. Follow the on-screen prompts. After setting up the admin user, you will be presented with the Fleet dashboard.&lt;/p&gt;
&lt;h2 id="bonus-round-enroll-your-first-osquery-agent"&gt;BONUS ROUND: Enroll Your First Osquery Agent!
&lt;/h2&gt;&lt;p&gt;A Fleet server is most useful when it has agents reporting in. You can run an osquery agent as another Docker container.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Obtain Enroll Secret:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the Fleet UI, navigate to &lt;strong&gt;Hosts&lt;/strong&gt; and click the &lt;strong&gt;Add hosts&lt;/strong&gt; button.&lt;/li&gt;
&lt;li&gt;Fleet will display an enroll secret. Copy this secret for the next step.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Run the Osquery Agent Container:&lt;/strong&gt;
Open a terminal and execute the following command.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Replace &lt;code&gt;YOUR_ENROLL_SECRET_FROM_FLEET_UI&lt;/code&gt; with the actual secret from the UI.&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;192.168.50.129&lt;/code&gt; with your Docker host&amp;rsquo;s IP address.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;span class="lnt"&gt;19
&lt;/span&gt;&lt;span class="lnt"&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;ENROLL_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;YOUR_ENROLL_SECRET_FROM_FLEET_UI&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;FLEET_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;192.168.50.129:8083&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;docker run -d --name osquery-agent-test &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; osquery/osquery:latest osqueryd &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --enroll_secret&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ENROLL_SECRET&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --tls_hostname&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FLEET_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --enroll_tls_endpoint&lt;span class="o"&gt;=&lt;/span&gt;/api/osquery/enroll &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --config_plugin&lt;span class="o"&gt;=&lt;/span&gt;tls &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --config_tls_endpoint&lt;span class="o"&gt;=&lt;/span&gt;/api/osquery/config &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --logger_plugin&lt;span class="o"&gt;=&lt;/span&gt;tls &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --logger_tls_endpoint&lt;span class="o"&gt;=&lt;/span&gt;/api/osquery/log &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --disable_distributed&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --distributed_plugin&lt;span class="o"&gt;=&lt;/span&gt;tls &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --distributed_tls_read_endpoint&lt;span class="o"&gt;=&lt;/span&gt;/api/osquery/distributed/read &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --distributed_tls_write_endpoint&lt;span class="o"&gt;=&lt;/span&gt;/api/osquery/distributed/write &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --host_identifier&lt;span class="o"&gt;=&lt;/span&gt;uuid &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --force&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --verbose&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --tls_allow_unsafe&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;After a few moments, the new host should appear on the &lt;strong&gt;Hosts&lt;/strong&gt; page in the Fleet UI.&lt;/p&gt;
&lt;h2 id="cleaning-up-returning-to-shore"&gt;Cleaning Up: Returning to Shore
&lt;/h2&gt;&lt;p&gt;When you&amp;rsquo;re finished exploring, you can cleanly remove the entire Fleet stack.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stop the Containers:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;docker stop MySQL Redis fleetdm osquery-agent-test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Remove the Containers:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;docker rm MySQL Redis fleetdm osquery-agent-test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;(Optional) Remove Host Directories:&lt;/strong&gt;
If you want to remove all persisted data, you can delete the directories you created earlier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;rm -rf /mnt/user/appdata/mysql
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;rm -rf /mnt/user/appdata/fleetdm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And just like that, the system is back to its original state. This ease of teardown is invaluable for experimentation.&lt;/p&gt;
&lt;h2 id="teaser-for-part-2---s3-storage"&gt;Teaser for Part 2 - S3 Storage!
&lt;/h2&gt;&lt;p&gt;Feeling adventurous? Ready to take this Fleet setup to the next frontier? This Dockerized deployment is fantastic for getting started, but for more persistent or larger-scale scenarios, especially involving log retention and file carving, a more robust storage solution is beneficial.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stay Tuned!&lt;/strong&gt; In the next article in this series, the Fleet deployment will be supercharged by configuring &lt;strong&gt;S3-compatible object storage (using MinIO, all in Docker, of course!)&lt;/strong&gt; for scalable log and file carve storage. Imagine effortlessly storing and managing extensive endpoint data!&lt;/p&gt;
&lt;p&gt;Catch ya on the next project!&lt;/p&gt;
&lt;p&gt;Josh üññ&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a class="link" href="https://unsplash.com/@afgprogrammer?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash" target="_blank" rel="noopener"
&gt;Mohammad Rahmani&lt;/a&gt; on &lt;a class="link" href="https://unsplash.com" target="_blank" rel="noopener"
&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description></item><item><title>Don't Forget to Apply Updates to your DB</title><link>https://kc9wwh.net/p/dont-forget-to-apply-updates-to-your-db/</link><pubDate>Sun, 26 Jan 2025 08:33:38 +0000</pubDate><guid>https://kc9wwh.net/p/dont-forget-to-apply-updates-to-your-db/</guid><description>&lt;img src="https://kc9wwh.net/p/dont-forget-to-apply-updates-to-your-db/cover.jpg" alt="Featured image of post Don't Forget to Apply Updates to your DB" /&gt;&lt;p&gt;About a month ago I setup &lt;a class="link" href="https://fleetdm.com" target="_blank" rel="noopener"
&gt;Fleet Device Management&lt;/a&gt; and since then there have been a couple updates that have come out and along with that some required database migrations or updates that needed to happen. Unlike with other MDM&amp;rsquo;s I&amp;rsquo;ve used in the past, the migrations that needed to happen on the database do not auto apply when an upgraded version is ran against it. Instead, you need to manually complete them.&lt;/p&gt;
&lt;p&gt;Now I&amp;rsquo;ve see these warning for a couple of weeks, but kept putting them off. Until today at least, as after updating my fleetdm/fleet docker container to the latest version, Fleet would no longer startup. &lt;em&gt;ruh-roh!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What is the first thing we do when a server doesn&amp;rsquo;t boot, we try again&amp;hellip;only, that didn&amp;rsquo;t work.&lt;/p&gt;
&lt;p&gt;Whats the second thing we do? That&amp;rsquo;s right! We check the logs, and those logs were all about telling me I really need to do these database migrations. But how since the docker container immediately stops after starting it?&lt;/p&gt;
&lt;p&gt;First we need to understand why the container keeps stopping. That is because unless a docker container is doing something (i.e., a service is actively running on the container), docker, will stop the container to save on resources being wasted. So, how do we overcome this when the container isn&amp;rsquo;t doing what we &lt;em&gt;want&lt;/em&gt; it to do? We give it something else to do, by having it run tail against &lt;code&gt;/dev/null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Normal docker run Command:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;span class="lnt"&gt;19
&lt;/span&gt;&lt;span class="lnt"&gt;20
&lt;/span&gt;&lt;span class="lnt"&gt;21
&lt;/span&gt;&lt;span class="lnt"&gt;22
&lt;/span&gt;&lt;span class="lnt"&gt;23
&lt;/span&gt;&lt;span class="lnt"&gt;24
&lt;/span&gt;&lt;span class="lnt"&gt;25
&lt;/span&gt;&lt;span class="lnt"&gt;26
&lt;/span&gt;&lt;span class="lnt"&gt;27
&lt;/span&gt;&lt;span class="lnt"&gt;28
&lt;/span&gt;&lt;span class="lnt"&gt;29
&lt;/span&gt;&lt;span class="lnt"&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;docker run
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -d
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --name=&amp;#39;fleetdm&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --net=&amp;#39;bridge&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --pids-limit 2048
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e TZ=&amp;#34;America/Chicago&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e HOST_HOSTNAME=&amp;#34;Loki&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e HOST_CONTAINERNAME=&amp;#34;fleetdm&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_MYSQL_ADDRESS&amp;#39;=&amp;#39;10.0.10.82:3306&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_MYSQL_DATABASE&amp;#39;=&amp;#39;YOUR_FLEET_DB&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_MYSQL_USERNAME&amp;#39;=&amp;#39;YOUR_FLEET_USER&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_MYSQL_PASSWORD&amp;#39;=&amp;#39;YOUR_FLEET_PASS&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_REDIS_ADDRESS&amp;#39;=&amp;#39;192.168.50.129:6379&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_SERVER_CERT&amp;#39;=&amp;#39;/mnt/data/certs/certificate.crt&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_SERVER_KEY&amp;#39;=&amp;#39;/mnt/data/certs/private.key&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_MDM_WINDOWS_WSTEP_IDENTITY_CERT&amp;#39;=&amp;#39;/mnt/data/win_mdm_certs/fleet-mdm-win-wstep.crt&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_MDM_WINDOWS_WSTEP_IDENTITY_KEY&amp;#39;=&amp;#39;/mnt/data/win_mdm_certs/fleet-mdm-win-wstep.key&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_SERVER_PRIVATE_KEY&amp;#39;=&amp;#39;YOUR_SERVER_PRIVATE_KEY&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_LICENSE_KEY&amp;#39;=&amp;#39;YOUR_KEY_HERE&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_OSQUERY_STATUS_LOG_PLUGIN&amp;#39;=&amp;#39;filesystem&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_OSQUERY_RESULT_LOG_PLUGIN&amp;#39;=&amp;#39;filesystem&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_FILESYSTEM_STATUS_LOG_FILE&amp;#39;=&amp;#39;/mnt/data/logs/status.log&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_FILESYSTEM_RESULT_LOG_FILE&amp;#39;=&amp;#39;/mnt/data/logs/result.log&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_FILESYSTEM_AUDIT_LOG_FILE&amp;#39;=&amp;#39;/mnt/data/logs/audit.log&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_FILESYSTEM_ENABLE_LOG_ROTATION&amp;#39;=&amp;#39;true&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_ACTIVITY_ENABLE_AUDIT_LOG&amp;#39;=&amp;#39;true&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_ACTIVITY_AUDIT_LOG_PLUGIN&amp;#39;=&amp;#39;filesystem&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_LOGGING_DEBUG&amp;#39;=&amp;#39;true&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -p &amp;#39;8081:8080/tcp&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -v &amp;#39;/mnt/user/appdata/fleetdm&amp;#39;:&amp;#39;/mnt/data&amp;#39;:&amp;#39;rw&amp;#39; &amp;#39;fleetdm/fleet&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Normal docker run w/ Tail Command:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;span class="lnt"&gt;19
&lt;/span&gt;&lt;span class="lnt"&gt;20
&lt;/span&gt;&lt;span class="lnt"&gt;21
&lt;/span&gt;&lt;span class="lnt"&gt;22
&lt;/span&gt;&lt;span class="lnt"&gt;23
&lt;/span&gt;&lt;span class="lnt"&gt;24
&lt;/span&gt;&lt;span class="lnt"&gt;25
&lt;/span&gt;&lt;span class="lnt"&gt;26
&lt;/span&gt;&lt;span class="lnt"&gt;27
&lt;/span&gt;&lt;span class="lnt"&gt;28
&lt;/span&gt;&lt;span class="lnt"&gt;29
&lt;/span&gt;&lt;span class="lnt"&gt;30
&lt;/span&gt;&lt;span class="lnt"&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;docker run
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -d
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --name=&amp;#39;fleetdm&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --net=&amp;#39;bridge&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --pids-limit 2048
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e TZ=&amp;#34;America/Chicago&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e HOST_HOSTNAME=&amp;#34;Loki&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e HOST_CONTAINERNAME=&amp;#34;fleetdm&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_MYSQL_ADDRESS&amp;#39;=&amp;#39;10.0.10.82:3306&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_MYSQL_DATABASE&amp;#39;=&amp;#39;YOUR_FLEET_DB&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_MYSQL_USERNAME&amp;#39;=&amp;#39;YOUR_FLEET_USER&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_MYSQL_PASSWORD&amp;#39;=&amp;#39;YOUR_FLEET_PASS&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_REDIS_ADDRESS&amp;#39;=&amp;#39;192.168.50.129:6379&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_SERVER_CERT&amp;#39;=&amp;#39;/mnt/data/certs/certificate.crt&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_SERVER_KEY&amp;#39;=&amp;#39;/mnt/data/certs/private.key&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_MDM_WINDOWS_WSTEP_IDENTITY_CERT&amp;#39;=&amp;#39;/mnt/data/win_mdm_certs/fleet-mdm-win-wstep.crt&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_MDM_WINDOWS_WSTEP_IDENTITY_KEY&amp;#39;=&amp;#39;/mnt/data/win_mdm_certs/fleet-mdm-win-wstep.key&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_SERVER_PRIVATE_KEY&amp;#39;=&amp;#39;YOUR_SERVER_PRIVATE_KEY&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_LICENSE_KEY&amp;#39;=&amp;#39;YOUR_KEY_HERE&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_OSQUERY_STATUS_LOG_PLUGIN&amp;#39;=&amp;#39;filesystem&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_OSQUERY_RESULT_LOG_PLUGIN&amp;#39;=&amp;#39;filesystem&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_FILESYSTEM_STATUS_LOG_FILE&amp;#39;=&amp;#39;/mnt/data/logs/status.log&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_FILESYSTEM_RESULT_LOG_FILE&amp;#39;=&amp;#39;/mnt/data/logs/result.log&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_FILESYSTEM_AUDIT_LOG_FILE&amp;#39;=&amp;#39;/mnt/data/logs/audit.log&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_FILESYSTEM_ENABLE_LOG_ROTATION&amp;#39;=&amp;#39;true&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_ACTIVITY_ENABLE_AUDIT_LOG&amp;#39;=&amp;#39;true&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_ACTIVITY_AUDIT_LOG_PLUGIN&amp;#39;=&amp;#39;filesystem&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e &amp;#39;FLEET_LOGGING_DEBUG&amp;#39;=&amp;#39;true&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -p &amp;#39;8081:8080/tcp&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -v &amp;#39;/mnt/user/appdata/fleetdm&amp;#39;:&amp;#39;/mnt/data&amp;#39;:&amp;#39;rw&amp;#39; &amp;#39;fleetdm/fleet&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; tail -f /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Now that I gave the container something to do, besides starting Fleet since that is immediately stopping, I can now pull up an interactive terminal and perform the database migrations.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;docker exec -it fleetdm fleet prepare db
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;You could also run this as a non-interactive command using &lt;code&gt;docker exec fleetdm fleet prepare db&lt;/code&gt;, but as it was the first time running this for an upgrade, I wanted to be able to walk through it without the terminal session suddenly closing.&lt;/p&gt;
&lt;p&gt;That was it! Pretty painless once you know what you&amp;rsquo;re doing, but definitely something you need to be aware of when performing upgrades to Fleet and to always check if there are any pending db migrations that need to occur after.&lt;/p&gt;
&lt;p&gt;Catch ya on the next project!&lt;/p&gt;
&lt;p&gt;Josh üññ&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a class="link" href="https://unsplash.com/@ffstop?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash" target="_blank" rel="noopener"
&gt;Fotis Fotopoulos&lt;/a&gt; on &lt;a class="link" href="https://unsplash.com" target="_blank" rel="noopener"
&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description></item><item><title>The First Issue with Starting a Blog</title><link>https://kc9wwh.net/p/the-first-issue-with-starting-a-blog/</link><pubDate>Fri, 24 Jan 2025 16:10:38 -0600</pubDate><guid>https://kc9wwh.net/p/the-first-issue-with-starting-a-blog/</guid><description>&lt;img src="https://kc9wwh.net/p/the-first-issue-with-starting-a-blog/cover.jpg" alt="Featured image of post The First Issue with Starting a Blog" /&gt;&lt;p&gt;If you&amp;rsquo;ve ever made an effort to do a blog, you&amp;rsquo;ll understand. The real fun is learning about new things, but you also need to prioritize writing about the things you do as quickly as possible so that you can provide more detail around the things you do and be able to better talk about the challenges you faced and how you got past them. Bottom line, the longer you wait, the more it&amp;rsquo;ll show.&lt;/p&gt;
&lt;p&gt;So, starting today, I&amp;rsquo;ve made a commitment to do better.&lt;/p&gt;
&lt;p&gt;Until very recently I was drowning in Apple devices. But after taking a short professional break, I was left with only my Apple iPhone 15 Pro Max and my ASUS ROG Zephyrus gaming laptop with at the time Windows 11 Home. Since then I&amp;rsquo;ve replaced the cooling fans and reapplied thermal paste, as well as upgraded to Windows 11 Pro. I do have to admit that there were a lot of frustrations early on with moving all in with Windows as my daily driver. To be clear, there are still some, but overall in the last few months, Windows has started to grown on my.&lt;/p&gt;
&lt;p&gt;Now the largest hurdle was understanding that the Windows world loves to access their email via a web browser or Outlook. I love Apple Mail and the variety of third-party email clients available on macOS. But for whatever reason, the number on the Windows side is much much lower and so is the ascetic design qualities I&amp;rsquo;ve come to appreciate in the Apple ecosystem. I&amp;rsquo;ve tried anything that stood out and looked great, but in the end, there was always something off, something I didn&amp;rsquo;t like about it. In the end, I choose to settle with a mix of Outlook and more and more I finding myself accessing my iCloud Mail account via the web browser. This is most likely a personal preference, but for me, it was the hardest part to overcome and the lack of Apple to Microsoft integrations don&amp;rsquo;t help.&lt;/p&gt;
&lt;p&gt;As I started using my computer more and more, I have gotten really comfortable with Windows again, even though I really haven&amp;rsquo;t done much technically with a Windows computer since Windows XP. That said, I am absolutely loving two big things for me as I dive more and more back into the technical side on Windows. First, I love that Microsoft has brought Linux to the platform via WSL (Windows Subsystem Linux). This allows me to access any command line utilities I was already accustomed to from working in macOS and Linux systems. On top of that, Microsoft has created a kind of redirect in Windows Command prompt and Powershell where you can use ls, rm, etc and it just &amp;ldquo;redirects&amp;rdquo; it to the appropriate Windows module and has (limited) flag support for them as well. But this has certainly made my switch much easier.&lt;/p&gt;
&lt;p&gt;Secondly, I absolutely love and was thrilled to find that &lt;a class="link" href="https://oh-my-posh.dev" target="_blank" rel="noopener"
&gt;Oh-My-Posh&lt;/a&gt; had support for Windows! I&amp;rsquo;m using it right now in Powershell with VIM writing this blog post in markdown and I absolutely love it! I&amp;rsquo;ll also say that Powershell is very intuitive and the modules are very well documented for those occasions where you want to write some Windows scripts.&lt;/p&gt;
&lt;p&gt;Today, I had the opportunity to work on a side project involving Entra ID and Microsoft Endpoint Manager (a.k.a. Intune). Now I have some previous Windows experience from when I was growing up and early on in my professional career. However, I remembered everything being scripted. So, while I was waiting for my Azure access to go through, I started planning to deploy a Powershell script to newly enrolled organizational devices. This script would install Google Chrome, Slack, and Microsoft Office 365 along with configuring a SharePoint sync through OneDrive and mapping a network drive.&lt;/p&gt;
&lt;p&gt;But, when I received access to Azure and logged in, I started to realize that a lot of the features and comforts I was familiar with on the Apple MDM side, has made their way over to Windows as well. Deploying apps from the Microsoft App Store is straight forward and quick to setup. You can also use a tool called the &lt;a class="link" href="https://github.com/microsoft/Microsoft-Win32-Content-Prep-Tool" target="_blank" rel="noopener"
&gt;Microsoft Win32 Content Prep Tool&lt;/a&gt; to create a deploy-able application from an .exe or .msi installer. Which, I did use to create a Google Chrome Enterprise package which I uploaded to Microsoft Endpoint Manager and was able to successfully deploy.&lt;/p&gt;
&lt;p&gt;Configuration Profile or Configuration Policies (as they are referred to in Microsoft Endpoint Manager) provide the same type of functionality restrictions and configuration capabilities you&amp;rsquo;d come to expect on the Apple MDM side as well. Even better, Microsoft Endpoint Manager has the most common &lt;a class="link" href="https://learn.microsoft.com/en-us/windows/client-management/mdm/policy-configuration-service-provider" target="_blank" rel="noopener"
&gt;Configuration Service Providers or CSPs&lt;/a&gt; already loaded into the platform, so you just need to essentially search for what you are looking to configure, such as setting a home page in Google Chrome or configuring OneDrive to sync with SharePoint. Once you found the key you were looking for, just add it to the Policy, enable the key and configure and needed parameters associated with it. Next, define your scope for how, when and to whom you are going to deploy the Configuration Policy and you&amp;rsquo;re done.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Quick Note: From my (all be it limited) experience with Windows MDM, some of these policies will not apply until a restart or the user logs out of the device.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once I had the various applications ready to go in the Company Portal, along with a few Configuration Policies configured, I decided to take a look at branding the Company Portal to really make it feel as part of the organization. But, I was unfortunately disappointed at the available options for really applying a custom brand to the application. I was able to specify a custom color for the application, as well as logo and a few other minor things, but the changes on the Company Portal side were extremely minimal, mostly just changing the menu bar of the window. The rest of the applications look stayed the same and really clashed, so I ended up deleting the branding config and left it with the default.&lt;/p&gt;
&lt;p&gt;Anyway, on Monday its back to testing and improving the build process for when we have to reload a system or setup a new device for someone.&lt;/p&gt;
&lt;p&gt;Till Next Time!&lt;/p&gt;
&lt;p&gt;Josh üññ&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a class="link" href="https://unsplash.com/@jerrykavan?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash" target="_blank" rel="noopener"
&gt;Jerry Kavan&lt;/a&gt; on &lt;a class="link" href="https://unsplash.com" target="_blank" rel="noopener"
&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description></item><item><title>Starting my journey with Hugo</title><link>https://kc9wwh.net/p/starting-my-journey-with-hugo/</link><pubDate>Wed, 01 Jan 2025 23:33:38 +0000</pubDate><guid>https://kc9wwh.net/p/starting-my-journey-with-hugo/</guid><description>&lt;img src="https://kc9wwh.net/p/starting-my-journey-with-hugo/cover.jpg" alt="Featured image of post Starting my journey with Hugo" /&gt;&lt;p&gt;I&amp;rsquo;ve been wanting to start my own blog for quite some time, but it wasn&amp;rsquo;t much of a priority in the past. Now, I find myself kicking myself for not doing this sooner! That said, I&amp;rsquo;m thrilled to share that I&amp;rsquo;ve finally spun up my personal blog and look forward to sharing my knowledge with anyone interested.&lt;/p&gt;
&lt;p&gt;So, why not start out by talking about my journey with &lt;a class="link" href="https://gohugo.io" target="_blank" rel="noopener"
&gt;Hugo&lt;/a&gt;? If you&amp;rsquo;re not familiar with Hugo, it is one of the leading static website generators out there. It&amp;rsquo;s extremely fast and pretty easy to use. I will admit, however, that the learning curve can be a bit frustrating at first. While all templates use the same framework, they each have their own unique quirks and niche differences.&lt;/p&gt;
&lt;h3 id="learning-hugo"&gt;Learning Hugo
&lt;/h3&gt;&lt;p&gt;I didn&amp;rsquo;t need to reinvent the wheel to get started with Hugo, and I want to give credit where it&amp;rsquo;s due. Two fantastic videos taught me everything I needed to know to get up and running with Hugo and even take things to the next level:&lt;/p&gt;
&lt;h4 id="1-luke-smiths-video"&gt;1. Luke Smith&amp;rsquo;s Video
&lt;/h4&gt;&lt;p&gt;The first video that I recommend watching is &lt;a class="link" href="https://youtu.be/ZFL09qhKi5I?si=sqCM8etnmJTTJ8gb" target="_blank" rel="noopener"
&gt;Hugo Actually Explained (Websites, Themes, Layouts and Intro to Scripting)&lt;/a&gt; by Luke Smith. This video provides a fundamental understanding of Hugo and its data structure. It&amp;rsquo;s an excellent starting point for anyone new to Hugo.&lt;/p&gt;
&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/ZFL09qhKi5I"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;h4 id="2-jw-caterines-video"&gt;2. JW Caterine&amp;rsquo;s Video
&lt;/h4&gt;&lt;p&gt;The second video that I found incredibly helpful was &lt;a class="link" href="https://youtu.be/6MKW4gzLItU?si=oVMr9bvzPc5i5cYF" target="_blank" rel="noopener"
&gt;How to Setup a Portfolio Website with Hugo&lt;/a&gt; by JW Caterine. Initially, I encountered some issues getting the Stacks theme to work on my setup, but these turned out to be computer-specific problems. This video walks you through a complete cloud-hosted solution and gets you up and running with Hugo in no time. Even better, the solution is free to use.&lt;/p&gt;
&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/6MKW4gzLItU"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;h3 id="why-hugo"&gt;Why Hugo?
&lt;/h3&gt;&lt;p&gt;With over 20 years of experience in IT and SaaS, I&amp;rsquo;ve worked with countless platforms and tools. Hugo stands out because of its speed, simplicity, and the control it offers. As someone who values efficiency and customization, Hugo fits perfectly into my workflow. Whether you&amp;rsquo;re a seasoned professional or just starting out, it&amp;rsquo;s a tool worth exploring.&lt;/p&gt;
&lt;h3 id="what-to-expect"&gt;What to Expect
&lt;/h3&gt;&lt;p&gt;In future posts, I plan to dive deeper into technical topics, share insights from my years in the industry, and provide tips and tutorials for fellow tech enthusiasts. My goal is to create a resource that others can learn from and build upon.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re considering starting a blog or experimenting with static site generators, I highly recommend giving Hugo a try. Stay tuned for more updates, and feel free to reach out with any questions or suggestions. Let&amp;rsquo;s build something great together!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a class="link" href="https://unsplash.com/@thomasjsn?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash" target="_blank" rel="noopener"
&gt;Thomas Jensen&lt;/a&gt; on &lt;a class="link" href="https://unsplash.com" target="_blank" rel="noopener"
&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description></item><item><title>The start of a journey</title><link>https://kc9wwh.net/p/the-start-of-a-journey/</link><pubDate>Wed, 01 Jan 2025 23:19:06 +0000</pubDate><guid>https://kc9wwh.net/p/the-start-of-a-journey/</guid><description>&lt;img src="https://kc9wwh.net/p/the-start-of-a-journey/cover.jpg" alt="Featured image of post The start of a journey" /&gt;&lt;p&gt;Hello! üëã&lt;/p&gt;
&lt;p&gt;After 20+ years working in IT and in SaaS, I&amp;rsquo;ve decided to create my own blog. Why you may ask? Well, I&amp;rsquo;ve always loved sharing information with others and especially my team members, but I&amp;rsquo;ve decided to broaden that now and share my knowledge with the world. I&amp;rsquo;ll use this platform to share information that I&amp;rsquo;ve learned while working on various projects, currently learning Hugo and Fleet Device Management. But with over 5 years in Cellular Engineering, 8 Years in Systems Adminsitration, and over 8 years in Mobile Device Management and SaaS, I&amp;rsquo;m sure there is something we share in common.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s to another year of growth and education! üçª&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a class="link" href="https://unsplash.com/@dinoreichmuth?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash" target="_blank" rel="noopener"
&gt;Dino Reichmuth&lt;/a&gt; on &lt;a class="link" href="https://unsplash.com/photos/yellow-volkswagen-van-on-road-A5rCN8626Ck?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash" target="_blank" rel="noopener"
&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description></item></channel></rss>